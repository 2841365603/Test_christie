{"name": "test_Get_all_intelligent", "status": "broken", "statusDetails": {"message": "json.decoder.JSONDecodeError: Expecting value: line 1 column 254 (char 253)", "trace": "self = <Testcase_Intelligent.test_01_Get_all_intelligent.Test_01_Get_all_intelligent object at 0x000002304AB403A0>\n\n    @allure.feature('【需求点】：D001-获取所有智能信息')\n    @allure.story('【正常获取】')\n    @allure.severity('normal')\n    def test_Get_all_intelligent(self):\n        ip = ReadIP().Read()\n        urls = Read_Intelligent_url().Read()\n        url1 = urls['url01']['url']\n        url = ip + url1\n        auth = ReadAuthorization().Read()\n        headers = {\n            'Authorization': auth,\n        }\n        method = 'get'\n        # 发送请求\n>       res = RequestTools().send_requests(method=method, url=url, header=headers)\n\ntest_01_Get_all_intelligent.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\common\\request_utill.py:70: in send_requests\n    res = json.loads(str(res).replace(\"'\", \"\\\"\"))\nG:\\python-3.9.0\\lib\\json\\__init__.py:346: in loads\n    return _default_decoder.decode(s)\nG:\\python-3.9.0\\lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x0000023049495C10>\ns = '[{\"name\": \"A Time of Day Occurs\", \"conditionsRelation\": \"and\", \"condition\": [{\"params\": {\"time\": \"15:48:00\", \"timeZon...22-12-21T05:46:35.454Z\", \"enable\": False, \"enableTime\": \"2022-12-21T05:46:35.550Z\", \"id\": \"63a29dbb6436300019bc1e3a\"}]'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 254 (char 253)\n\nG:\\python-3.9.0\\lib\\json\\decoder.py:355: JSONDecodeError"}, "start": 1671602146339, "stop": 1671602146361, "uuid": "9710beea-0713-46e3-bbc8-ced8185ed0e3", "historyId": "dee0ec546871f9af53161db104963251", "testCaseId": "8eb733272e905110b061a7b806eee99f", "fullName": "Testcase_Intelligent.test_01_Get_all_intelligent.Test_01_Get_all_intelligent#test_Get_all_intelligent", "labels": [{"name": "feature", "value": "【需求点】：D001-获取所有智能信息"}, {"name": "severity", "value": "normal"}, {"name": "story", "value": "【正常获取】"}, {"name": "parentSuite", "value": "Testcase_Intelligent"}, {"name": "suite", "value": "test_01_Get_all_intelligent"}, {"name": "subSuite", "value": "Test_01_Get_all_intelligent"}, {"name": "host", "value": "SIE180286"}, {"name": "thread", "value": "7732-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcase_Intelligent.test_01_Get_all_intelligent"}]}