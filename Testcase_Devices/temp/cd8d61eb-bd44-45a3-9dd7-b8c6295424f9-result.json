{"name": "test_Get_target_device_info", "status": "broken", "statusDetails": {"message": "json.decoder.JSONDecodeError: Expecting value: line 1 column 261 (char 260)", "trace": "self = <Testcase_Devices.test_04_Get_target_device_info.Test_04_Get_target_device_info object at 0x0000011F8B7EF5E0>\n\n    @allure.feature('【需求点】：获取固定SN设备的信息')\n    @allure.story('【正常获取】')\n    @allure.severity('normal')\n    def test_Get_target_device_info(self):\n        ip = ReadIP().Read()\n        urls = ReadURL().Read()\n        device_sn = ReadSN().Read()\n        url1 = urls['url04']['url']\n        url = ip + url1\n        # print(\"---------------\")\n        # print(device_sn)\n        # print(url)\n        # print(\"---------------\")\n        url = url.replace('sn',device_sn)\n        # print(url)\n        auth = ReadAuthorization().Read()\n        headers = {\n            'Authorization': auth,\n        }\n        method = 'get'\n        # 发送请求\n>       res = RequestTools().send_requests(method=method, url=url, header=headers)\n\ntest_04_Get_target_device_info.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\common\\request_utill.py:75: in send_requests\n    res = json.loads(str(res).replace(\"'\", \"\\\"\"))\nG:\\python-3.9.0\\lib\\json\\__init__.py:346: in loads\n    return _default_decoder.decode(s)\nG:\\python-3.9.0\\lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x0000011F8A495C10>\ns = '{\"type\": \"light\", \"hwVersion\": 2, \"name\": \"科视接口自动化\", \"registerToken\": \"0ebb8fb4-fcd0-4a2d-9363-62e83cb61187\", \"fwType... \"uvComponentsStatus\": 65408, \"horizontalState\": \"horizontal\", \"maximumUvMode\": 0, \"warrantyStartDate\": \"2022-12-15\"}}'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 261 (char 260)\n\nG:\\python-3.9.0\\lib\\json\\decoder.py:355: JSONDecodeError"}, "start": 1671527015086, "stop": 1671527015108, "uuid": "cf5e0b7a-0456-4838-9956-d4784d4318fc", "historyId": "41c9e7470f0ec327a6f02ec3be0974e5", "testCaseId": "497176acc6aa09da0bda66145c2df40c", "fullName": "Testcase_Devices.test_04_Get_target_device_info.Test_04_Get_target_device_info#test_Get_target_device_info", "labels": [{"name": "story", "value": "【正常获取】"}, {"name": "feature", "value": "【需求点】：获取固定SN设备的信息"}, {"name": "severity", "value": "normal"}, {"name": "parentSuite", "value": "Testcase_Devices"}, {"name": "suite", "value": "test_04_Get_target_device_info"}, {"name": "subSuite", "value": "Test_04_Get_target_device_info"}, {"name": "host", "value": "SIE180286"}, {"name": "thread", "value": "4976-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcase_Devices.test_04_Get_target_device_info"}]}